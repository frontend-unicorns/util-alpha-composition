{"version":3,"sources":["components/Layout/index.ts","util/color.ts","styles/mq.ts","styles/theme.ts","components/InputColor/styled.ts","components/InputColor/index.tsx","components/ResultBox/styled.ts","components/ResultBox/index.tsx","pages/Home/styled.ts","pages/Home/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Layout","styled","div","calculateAdjustedColorValue","background","foreground","alpha","Math","round","numToHexNum","num","toString","padStart","colorToHex","red","green","blue","colorToRgba","toPrecision","mq","md","theme","color","palette","primary","light","text","dark","grey","HintText","p","InputText","input","InputColor","Label","label","LabelText","strong","React","memo","hintText","onUpdate","useState","colorValue","setColorValue","textValue","setTextValue","onChange","useCallback","event","newValue","currentTarget","value","computedColor","rawColor","splitColor","replace","split","map","val","trim","length","result","exec","groups","parseInt","r","g","b","a","parseFloat","computeColor","type","Text","Wrapper","ResultBox","originalHexa","colorToHexa","originalRgba","originalStyle","adjustedColor","foregroundAlpha","calculateAdjustedColor","adjustedHexa","adjustedRgba","adjustedStyle","wrapperStyle","style","Header","header","ResultTitle","h2","Subtitle","Title","h1","HomePage","backgroundColor","setBackgroundColor","foregroundColor","setForegroundColor","action","GlobalStyles","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.894f6143.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Layout = styled.div`\n  margin: auto;\n  max-width: 35rem;\n`\n","/* eslint-disable complexity */\n\nexport const computeColor = (rawColor: string): Color | null => {\n  const cleanedColor = rawColor\n    .replace('#', '')\n    .replace('rgba(', '')\n    .replace('rgb(', '')\n    .replace(')', '')\n\n  const splitColor = cleanedColor.split(',').map((val) => val.trim())\n\n  // HEX color\n  if (splitColor.length === 1) {\n    const result = /^(?<r>[a-f\\d]{2})(?<g>[a-f\\d]{2})(?<b>[a-f\\d]{2})(?<a>[a-f\\d]{2})?$/iu.exec(\n      splitColor[0]\n    )\n\n    return result?.groups\n      ? {\n          red: parseInt(result.groups.r, 16),\n          green: parseInt(result.groups.g, 16),\n          blue: parseInt(result.groups.b, 16),\n          alpha: result.groups.a ? parseInt(result.groups.a, 16) / 255 : 1,\n        }\n      : null\n  }\n\n  // RGB color\n  if (splitColor.length === 3 || splitColor.length === 4) {\n    const [red, green, blue, alpha] = splitColor\n    return red && green && blue\n      ? {\n          red: parseInt(red, 10),\n          green: parseInt(green, 10),\n          blue: parseInt(blue, 10),\n          alpha: alpha ? parseFloat(alpha) : 1,\n        }\n      : null\n  }\n\n  return null\n}\n\nconst calculateAdjustedColorValue = (\n  background: number,\n  foreground: number,\n  alpha: number\n): number => {\n  return Math.round(alpha * foreground + (1 - alpha) * background)\n}\n\nexport const calculateAdjustedColor = (\n  background: Color,\n  foreground: Color\n): Color => {\n  const foregroundAlpha = foreground.alpha\n\n  return {\n    red: calculateAdjustedColorValue(\n      background.red,\n      foreground.red,\n      foregroundAlpha\n    ),\n    green: calculateAdjustedColorValue(\n      background.green,\n      foreground.green,\n      foregroundAlpha\n    ),\n    blue: calculateAdjustedColorValue(\n      background.blue,\n      foreground.blue,\n      foregroundAlpha\n    ),\n    alpha: 1,\n  }\n}\n\nconst numToHexNum = (num: number) => num.toString(16).padStart(2, '0')\n\nexport const colorToHex = ({ red, green, blue }: Color): string =>\n  `#${numToHexNum(red)}${numToHexNum(green)}${numToHexNum(blue)}`\n\nexport const colorToHexa = ({ red, green, blue, alpha }: Color): string =>\n  `#${numToHexNum(red)}${numToHexNum(green)}${numToHexNum(blue)}${numToHexNum(\n    Math.round(alpha * 255)\n  )}`\n\nexport const colorToRgba = ({ red, green, blue, alpha }: Color): string =>\n  `rgba(${red}, ${green}, ${blue}, ${alpha.toPrecision(3)})`\n","export const breakPoints = {\n  md: '750px',\n}\n\nexport const mq = {\n  md: `@media (min-width: ${breakPoints.md})`,\n}\n","export const theme = {\n  color: {\n    palette: {\n      primary: '#42aaf4',\n    },\n    background: {\n      light: '#ededed',\n    },\n    text: {\n      dark: '#050d11',\n      grey: '#484848',\n      light: '#fff',\n    },\n  },\n}\n","import styled from 'styled-components'\n\nimport { mq } from 'styles/mq'\nimport { theme } from 'styles/theme'\n\nexport const HintText = styled.p`\n  color: ${theme.color.text.grey};\n  font-size: 0.7rem;\n  margin: 0.25rem 0;\n`\n\nexport const InputText = styled.input`\n  border: 2px solid ${theme.color.text.grey};\n  border-radius: 5px;\n  font-size: 1rem;\n  height: 2rem;\n  margin-top: 0.25rem;\n  padding: 0.25rem 0.5rem;\n  text-transform: lowercase;\n  width: 100%;\n`\n\nexport const InputColor = styled.input`\n  background: none;\n  border: none;\n  bottom: 0.25rem;\n  height: 1.5rem;\n  position: absolute;\n  right: 0.25rem;\n  width: 1.5rem;\n`\n\nexport const Label = styled.label`\n  display: inline-block;\n  margin: 0.75rem;\n  position: relative;\n  text-align: left;\n  width: calc(100% - 1.5rem);\n\n  ${mq.md} {\n    max-width: 320px;\n  }\n`\n\nexport const LabelText = styled.strong`\n  display: inline-block;\n  font-size: 0.9rem;\n`\n","import React, { FC, useCallback, useState } from 'react'\n\nimport { colorToHex, computeColor } from 'util/color'\n\nimport * as S from './styled'\n\ntype Action = { type: 'CHANGE_VALUE'; value: string; color: Color | null }\n\ntype Props = {\n  hintText?: string\n  label: string\n  onUpdate: (action: Action) => void\n}\n\nexport const InputColor: FC<Props> = React.memo(\n  ({ hintText, label, onUpdate }) => {\n    const [colorValue, setColorValue] = useState<string>('')\n    const [textValue, setTextValue] = useState('')\n\n    const onChange = useCallback(\n      (event: React.FormEvent<HTMLInputElement>) => {\n        const newValue = event.currentTarget.value\n\n        const computedColor = computeColor(newValue)\n\n        setTextValue(newValue)\n        setColorValue(computedColor ? colorToHex(computedColor) : '')\n\n        onUpdate({\n          type: 'CHANGE_VALUE',\n          value: newValue,\n          color: computedColor,\n        })\n      },\n      [onUpdate]\n    )\n\n    return (\n      <S.Label>\n        <S.LabelText>{label}</S.LabelText>\n        {hintText ? <S.HintText>{hintText}</S.HintText> : null}\n        <S.InputText onChange={onChange} value={textValue} />\n        <S.InputColor onChange={onChange} type=\"color\" value={colorValue} />\n      </S.Label>\n    )\n  }\n)\n","import styled from 'styled-components'\n\nimport { mq } from 'styles/mq'\n\nexport const Text = styled.p`\n  font-weight: 700;\n  margin: 0.25rem 0;\n`\n\nexport const Wrapper = styled.div`\n  margin: 0.75rem;\n  padding: 0.75rem;\n  width: calc(100% - 1.5rem);\n\n  ${mq.md} {\n    display: inline-block;\n    max-width: 320px;\n  }\n`\n","import React, { FC } from 'react'\n\nimport {\n  calculateAdjustedColor,\n  colorToHex,\n  colorToHexa,\n  colorToRgba,\n} from 'util/color'\n\nimport * as S from './styled'\n\ntype Props = {\n  background: Color\n  foreground: Color\n}\n\nexport const ResultBox: FC<Props> = ({ background, foreground }) => {\n  const originalHexa = colorToHexa(foreground)\n  const originalRgba = colorToRgba(foreground)\n  const originalStyle = {\n    color: originalRgba,\n  }\n\n  const adjustedColor = calculateAdjustedColor(background, foreground)\n  const adjustedHexa = colorToHex(adjustedColor)\n  const adjustedRgba = colorToRgba(adjustedColor)\n  const adjustedStyle = {\n    color: adjustedRgba,\n  }\n\n  const wrapperStyle = {\n    background: colorToRgba({ ...background, alpha: 1 }),\n  }\n\n  return (\n    <>\n      <S.Wrapper style={wrapperStyle}>\n        <S.Text style={originalStyle}>Original</S.Text>\n        <S.Text style={originalStyle}>{originalHexa}</S.Text>\n        <S.Text style={originalStyle}>{originalRgba}</S.Text>\n      </S.Wrapper>\n      <S.Wrapper style={wrapperStyle}>\n        <S.Text style={adjustedStyle}>Adjusted</S.Text>\n        <S.Text style={adjustedStyle}>{adjustedHexa}</S.Text>\n        <S.Text style={adjustedStyle}>{adjustedRgba}</S.Text>\n      </S.Wrapper>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nimport { mq } from 'styles/mq'\n\nexport const Header = styled.header`\n  margin: 1rem 0.75rem;\n\n  ${mq.md} {\n    margin: 1.5rem 0.75rem;\n  }\n`\n\nexport const ResultTitle = styled.h2`\n  font-size: 1.2rem;\n\n  ${mq.md} {\n    font-size: 1.4rem;\n  }\n`\n\nexport const Subtitle = styled.p`\n  margin: 0.75rem auto;\n  max-width: 26rem;\n`\n\nexport const Title = styled.h1`\n  font-size: 1.4rem;\n  margin: 1rem 0;\n\n  ${mq.md} {\n    font-size: 1.8rem;\n    margin: 10vh 0 1rem;\n  }\n`\n","import React, { useState } from 'react'\n\nimport { InputColor } from 'components/InputColor'\nimport { ResultBox } from 'components/ResultBox'\n\nimport * as S from './styled'\n\nexport const HomePage = () => {\n  const [backgroundColor, setBackgroundColor] = useState<Color | null>(null)\n  const [foregroundColor, setForegroundColor] = useState<Color | null>(null)\n\n  return (\n    <>\n      <S.Header>\n        <S.Title>Opacity Calculator</S.Title>\n        <S.Subtitle>\n          This tool calculates the solid color value of foreground color with\n          opacity, on top of a solid background color.\n        </S.Subtitle>\n      </S.Header>\n      <InputColor\n        hintText='e.g. \"#42aaf4\", \"rgb(66, 170, 244)\"'\n        label=\"Background color\"\n        onUpdate={(action) => {\n          if (action.type === 'CHANGE_VALUE' && action.color) {\n            setBackgroundColor(action.color)\n          }\n        }}\n      />\n      <InputColor\n        hintText='e.g. \"#42aaf466\", \"rgb(66, 170, 244, .4)\"'\n        label=\"Foreground color\"\n        onUpdate={(action) => {\n          if (action.type === 'CHANGE_VALUE' && action.color) {\n            setForegroundColor(action.color)\n          }\n        }}\n      />\n      {foregroundColor && backgroundColor ? (\n        <>\n          <S.ResultTitle>Result</S.ResultTitle>\n          <ResultBox\n            background={backgroundColor}\n            foreground={foregroundColor}\n          />\n        </>\n      ) : null}\n    </>\n  )\n}\n","import 'sanitize.css'\nimport { createGlobalStyle } from 'styled-components'\n\nimport { theme } from './theme'\n\nexport const GlobalStyles = createGlobalStyle`\n  * {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html {\n    font-family: sans-serif;\n    font-size: 125%;\n    height: 100%;\n  }\n\n  body {\n    background-color: ${theme.color.background.light};\n    color: ${theme.color.text.dark};\n    font-size: 0.8rem;\n    text-align: center;\n  }\n\n  #root {\n    height: 100%;\n    width: 100%;\n  }\n\n  button {\n    background: transparent;\n    border: none;\n    cursor: pointer;\n  }\n`\n","import React, { FC } from 'react'\nimport { Layout } from 'components/Layout'\nimport { HomePage } from 'pages/Home'\nimport { GlobalStyles } from 'styles/global'\n\nexport const App: FC = () => (\n  <Layout>\n    <GlobalStyles />\n    <HomePage />\n  </Layout>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { App } from 'App'\nimport { theme } from 'styles/theme'\n\nconst renderApp = () => {\n  ReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>,\n    document.getElementById('root')\n  )\n}\n\nif (module.hot) {\n  module.hot.accept('./App', renderApp)\n}\n\nrenderApp()\n"],"sourceRoot":""}